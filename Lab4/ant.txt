import numpy as np
import random


NUM_CITIES = 5
NUM_ANTS = 20
NUM_ITERATIONS = 100
ALPHA = 1.0       
BETA = 5.0        
RHO = 0.5         
Q = 100           


cities = np.random.rand(NUM_CITIES, 2)
distance_matrix = np.linalg.norm(cities[:, None] - cities, axis=2)
pheromone_matrix = np.ones((NUM_CITIES, NUM_CITIES))


def calculate_probabilities(current_city, visited):
    probabilities = []
    for next_city in range(NUM_CITIES):
        if next_city in visited:
            probabilities.append(0)
        else:
            pheromone = pheromone_matrix[current_city][next_city] ** ALPHA
            heuristic = (1 / distance_matrix[current_city][next_city]) ** BETA
            probabilities.append(pheromone * heuristic)
    total = sum(probabilities)
    return [p / total if total > 0 else 0 for p in probabilities]

def construct_tour():
    start_city = random.randint(0, NUM_CITIES - 1)
    tour = [start_city]
    while len(tour) < NUM_CITIES:
        probs = calculate_probabilities(tour[-1], tour)
        next_city = np.random.choice(range(NUM_CITIES), p=probs)
        tour.append(next_city)
    return tour

def compute_tour_length(tour):
    return sum(distance_matrix[tour[i]][tour[(i + 1) % NUM_CITIES]] for i in range(NUM_CITIES))


best_tour = None
best_length = float('inf')

for iteration in range(NUM_ITERATIONS):
    all_tours = []
    
    for _ in range(NUM_ANTS):
        tour = construct_tour()
        length = compute_tour_length(tour)
        all_tours.append((tour, length))
        
        if length < best_length:
            best_tour = tour
            best_length = length

    
    pheromone_matrix *= (1 - RHO)

    
    for tour, length in all_tours:
        for i in range(NUM_CITIES):
            a, b = tour[i], tour[(i + 1) % NUM_CITIES]
            pheromone_matrix[a][b] += Q / length
            pheromone_matrix[b][a] += Q / length  # symmetric TSP


clean_tour = [int(city) for city in best_tour]
print("Best tour:", clean_tour)

print("Best length:", round(best_length, 4))
